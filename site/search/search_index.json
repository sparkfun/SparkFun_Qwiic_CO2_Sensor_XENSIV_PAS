{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>Placeholder file for redirect to Introduction</p>"},{"location":"examples/","title":"Arduino Examples","text":""},{"location":"examples/#example-1-continuous-mode","title":"Example 1 - Continuous Mode","text":"<p>The first example demonstrates how to initialize the sensor over I<sup>2</sup>C to measure CO<sub>2</sub> data in Continuous Mode and print it out over serial. Open the example by navigating to File &gt; Examples &gt; XENSIV PAS CO2 &gt;  continuous-mode. After opening the example, select your Board and Port (in our case, SparkFun RedBoard IoT), and click \"Upload\". Open the serial terminal with the baud set to 9600 and you should see the same as the screenshot below: <p></p>"},{"location":"examples/#example-2-boost-regulator-early-notification","title":"Example 2 - Boost Regulator Early Notification","text":"<p>The second example follows the assembly step in the Hardware Assembly section tying the PAS CO2's INT pin to the boost regulator's EN pin to control power for the regulator during measurements. This is a custom example we wrote so you'll need to get it from the GitHub Repository or by copying the code below into a blank sketch:</p> Early Measurement Example <pre><code> /*\n  *  Name: Example01_EarlyMeasurementStartInterrupt\n  *\n  *  By: SparkFun Electronics, based on code from Infineon\n  * \n  *  SPDX-License-Identifier: MIT\n  *\n  *\n  *  Description: \n  *  This example is based on the early notification example from Infineon's \n  *  `arduino-pas-co2-sensor` library. The biggest deviation is to make it \n  *  specific to the ESP32 Thing Plus C. This example interfaces the interrupt\n  *  pin of the ESP32 Thing Plus C for readout synch and ties the INT pin to the\n  *  EN pin on the Qwiic PASCO2V01 board.\n  *\n  *  Please see examples/XENSIV PAS CO2/early-notification for more details.\n  * \n  *  Feel like supporting open source hardware?\n  *  Buy a board from SparkFun!\n  *  SparkFun Photoacoustic Spectroscopy CO2 Sensor - PASCO2V01 (Qwiic) (SEN-22956) https://www.sparkfun.com/products/22956\n  *  SparkFun IoT RedBoard - ESP32 Development Board (WRL-19177) https://www.sparkfun.com/products/19177\n  *\n  *  Hardware connections:\n  *  Connect the qwiic connector between the ESP32 Thing Plus C and the Qwiic PASCO2V01.\n  *  Need a qwiic cable? Get one here: https://www.sparkfun.com/products/17260\n  *  Using a breadboard, connect a jumper between the INT and EN pins, then \n  *    connect it to pin 12 on the ESP32 Thing Plus C.\n  *\n  */\n\n #include &lt;Arduino.h&gt;\n #include &lt;pas-co2-ino.hpp&gt; // http://librarymanager/All#XENSIV_PAS_CO2\n\n uint8_t intPin = 13; // ESP32 Thing Plus C pin, change for your hardware.\n\n #define I2C_FREQ_HZ 400000\n #define PERIODIC_MEAS_INTERVAL_IN_SECONDS 10\n #define EARLY_NOTIFICATION_ENABLED true\n\n PASCO2Ino myCO2Sensor(&amp;Wire, intPin);\n\n int16_t co2ppm;\n Error_t err;\n\n /* \n  * ISR will be called when the sensor is about start performing a measurement \n  * and when it's completed. This will allow the main loop to read the \n  * measurement when one is ready.\n  */\n volatile bool measurementReady = false;\n void isr (void *) {\n   if (digitalRead(intPin) == LOW)\n     measurementReady = true;\n   else\n     measurementReady = false;\n }\n\n void setup() {\n   Serial.begin(115200);\n\n   // Wait for serial to open.\n   while(!Serial) {\n     delay(100);\n   }\n\n   // Start I2C.\n   Wire.begin();\n   Wire.setClock(I2C_FREQ_HZ);\n\n   // Initialize the sensor.\n   err = myCO2Sensor.begin();\n   if(XENSIV_PASCO2_OK != err) {\n     Serial.print(\"Initialization error: \");\n     Serial.println(err);\n   }\n\n   // Start measurement every 10s, no alarm set, pass in the ISR, and enable early notification.\n   err = myCO2Sensor.startMeasure(PERIODIC_MEAS_INTERVAL_IN_SECONDS, 0, isr, EARLY_NOTIFICATION_ENABLED);\n   if(XENSIV_PASCO2_OK != err){\n     Serial.print(\"Start measurement error: \");\n     Serial.println(err);\n   }\n\n   Serial.println(\"Sensor setup complete and measurement started successfully.\");\n\n }\n\n void loop() {\n   if (measurementReady) {\n\n     // Clear flag\n     measurementReady = false;\n\n     Serial.println(\"Measurement ready.\");\n\n     err = myCO2Sensor.getCO2(co2ppm);\n     if(XENSIV_PASCO2_OK != err){\n       Serial.print(\"CO2 measure error: \");\n       Serial.println(err);\n     }\n\n     Serial.print(\"CO2 PPM value: \");\n     Serial.println(co2ppm);\n   }\n\n }\n</code></pre> <p>Select your board and port and upload the example. After the uploade completes, open the serial terminal with the baud set to 115200 and you should see a printout similar to the one below with CO<sub>2</sub> measurements printing every ten seconds:</p> <p></p>"},{"location":"hard_copy/","title":"Hard copy","text":"<p>Need to download or print our hookup guide?</p> <ul> <li>Print  (Single-Page View)<ul> <li>To save as a <code>*.pdf</code> file, select the Printer or Destination labeled Save as PDF. (Instructions will vary based on the browser)</li> </ul> </li> </ul>"},{"location":"hardware_assembly/","title":"Hardware Assembly","text":"<p>Now that we're familiar with the PAS CO2 sensor and other hardware on this breakout, it's time to assemble it into a circuit.</p>"},{"location":"hardware_assembly/#qwiic-assembly","title":"Qwiic Assembly","text":"<p>SparkFun's Qwiic system makes assembling a circuit a breeze. Simply plug the breakout into your chosen microcontroller with a Qwiic cable. After assembling your circuit, it should look similar to the photo below:</p> <p></p>"},{"location":"hardware_assembly/#soldered-assembly","title":"Soldered Assembly","text":"<p>Those who prefer to use either the UART or PWM interfaces or the other pins broken out on this board should solder wires or header pins to the PTH pins on the side of the board. If you're not familiar with through-hole soldering or would like a refresher, take a look at our Through-Hole Soldering Tutorial:</p> <ul> <li> How to Solder: Through-Hole Soldering </li> </ul>"},{"location":"hardware_assembly/#boost-regulator-interrupt-assembly","title":"Boost Regulator Interrupt Assembly","text":"<p>The Early Measurement example in the Examples section demonstrates how to use the PAS CO2's Interrupt pin as an early measurement signal to control the boost regulator's power during measurement periods. If you want to follow along with that example you'll need to tie the INT PTH pin and EN PTH pin together. We recommend a set of headers to these PTHs and bridge the EN and INT pins together using a jumper like this. You can also create a temporary connection between these pins with some alligator clips or through some wiring on a breadboard.</p> <p>Next, connect the INT pin on the PAS CO<sub>2</sub> sensor breakout to an interrupt capable pin on your development board. The example assumes the use of an ESP32 development board and sets pin 13 so adjust the wiring and code if necessary. With everything wired up on a breadboard, the circuit should look something similar to the photo below:</p> <p></p>"},{"location":"hardware_assembly/#calibration-procedure","title":"Calibration Procedure","text":"<p>The PASCO2V01 sensors require a week long calibration period, measuring every 10 seconds. During that period, the sensor must be outside for at least 30 minutes while taking measurements. Refer to the Automatic baseline offset correction (ABOC) and forced compensation scheme (FCS) application note for complete information about the calibration process. The graph below shows three sensors data outputs merge together during our calibration testing:</p> <p></p>"},{"location":"hardware_assembly/#installation-recommendations","title":"Installation Recommendations","text":"<p>For ideal measurements, Infineon has several recommendations for installing the sensor in the final application found in this application note. The list below outlines most of them but for complete information, refer to the app note linked above.</p> <ul> <li>Allow space above the sensor at least 12mm tall with a minimum opening size of 14mm x 14mm.</li> <li>Avoid direct airflow in front of the sensor.</li> <li>Isolate the sensor from ambient heat sources.</li> <li>Isolate the sensor from vibration sources.</li> <li>Avoid placing the sensor in direct sunlight.</li> <li>Prevent any condensation/water contact with the sensor.</li> </ul>"},{"location":"hardware_overview/","title":"Hardware Overview","text":"<p>Let's take a closer look at the XENSIV\u2122 PAS CO<sub>2</sub> sensor and other hardware present on this Qwiic breakout.</p>"},{"location":"hardware_overview/#xensiv-pas-co2-sensor","title":"XENSIV PAS CO2 Sensor","text":"<p>The XENSIV PAS CO2 sensor from Infineon utilizes a photoacoustic spectroscopy gas measurement system to accurately measure CO<sub>2</sub> concentration in a very stable sensing environment. </p> <p></p> <p>Photoacoustic spectroscopy uses a combination of narrow-band filtered IR light and MEMS microphone to measure CO<sub>2</sub> molecule concentration with high accuracy. The PAS CO<sub>2</sub> package includes an on-board microcontroller that parses the data recorded and converts it into direct parts per million (ppm) output to either UART, I<sup>2</sup>C, or pulse width modulation (PWM). For a complete overview of the PAS CO2, refer to the datasheet.</p> <p>You may be wondering what photoacoustic spectroscopy means. Photoacoustic measuring uses light (photo) and sound/vibrations (acoustic) in tandem to measure the the photoacoustic effect when energy is absorbed by particles. The sensor shines a specific frequency of IR light that CO<sub>2</sub> molecules absorb causing them to heat up, expand and release a pressure wave (sound) wave that the MEMS microphone picks up. This data is then processed and output in human-readable concentrations in PPM. This is just a quick and basic explanation of photoacoustic spectroscopy used in the PAS CO2 sensor. For detailed information, refer to Invensense's product brief for the sensor.</p> <p>The PAS CO2 has three operating modes: Idle, Continuous, and Single-Shot. In idle mode the sensor is inactive and does not take any measurements. In continuous mode the sensor takes periodic measurements and returns to idle once the measurement sequence finishes. The measurement period is configurable from anywhere between 5 to 4095 seconds. In single-shot mode the sensor enters a single measurement period and then returns to idle mode. </p> Parameter Units Min Typ Max Notes CO<sub>2</sub> Output Range ppm 0 - 32,000 CO<sub>2</sub> Measurement Accuracy ppm - \u00b1(30 + 3%) - Accuracy when measuring between 400ppm and 5,000ppm. Ambient Temperature Range \u00b0C 0 - 50 Relative Humidity Range %RH 0 - 85 CO<sub>2</sub> Sampling Time s 5 60 4095"},{"location":"hardware_overview/#power-boost-circuit","title":"Power &amp; Boost Circuit","text":"<p>The PAS CO2 uses two input voltages, 12V for the IR emitter and 3.3V for the microcontroller and other components. This breakout has a AP3012 boost regulator to step up 3.3V from the Qwiic connectors to 12V along with a series of decoupling capacitors to ensure the IR emitter gets a clean supply voltage. The breakout also has PTH pins for both supply voltage if users prefer to power the sensor from a dedicated power supply. If you select this option, ensure both voltages fall within the supply range for each input (VDD3.3: 3V-3.6V and VDD12: 10.8V-13.2V).</p>"},{"location":"hardware_overview/#communication-interfaces-pinout","title":"Communication Interfaces &amp; Pinout","text":"<p>We designed this board to set the PAS CO2 to communicate by I<sup>2</sup>C by default but have included PTH pins for both the UART and PWM interfaces along with solder jumpers to enable/disable all three options.</p> <p></p>"},{"location":"hardware_overview/#qwiici2c","title":"Qwiic/I<sup>2</sup>C","text":"<p>The board routes the PAS CO2's I<sup>2</sup>C interface to a pair of Qwiic connectors as well as 0.1\"-spaced plated through-hole (PTH) headers. This header also includes the PAS CO2's Interrupt pin, the AP3012 boost regulator's Enable pin, as well as connections to 3.3V and GND. The PAS CO2's unshifted 7-bit I<sup>2</sup>C address is 0x28.</p> <p>The Interrupt pin can function as a standard hardware interrupt for alarm thresholds, data ready, and sensor busy statuses but also is configurable to act as an early measurement start notification. In this mode, the interrupt pin enters an active state (set to either active-high or active-low) roughly one second before a measurement period which can be tied to the enable pin for the LM62421 boost regulator. The interrupt turns this power supply on for roughly 0.2s at the start of the measurement period and again at the end. The design of the board has both this pin and the boost regulator's enable pin next to each other so users can tie them to each other to turn on the boost regulator just before measurement occurs to help conserve power.</p>"},{"location":"hardware_overview/#uart","title":"UART","text":"<p>The board routes the TX and RX pins to one side of the board along with a Ground PTH for voltage reference if needed. This interface is disabled by default and requires adjusting the PSEL jumper on the back of the board. Read on to the Solder Jumpers section for more information about enabling UART. </p>"},{"location":"hardware_overview/#pwm","title":"PWM","text":"<p>The PAS CO2's PWM interface is routed to the oppposite side of the board from the UART and also includes a Ground PTH for voltage reference. This interface is also disabled by default and can be enabled by adjusting the PWM jumper on the back of the board. Read on to the Solder Jumpers section for more information on enabling PWM output.</p>"},{"location":"hardware_overview/#power-led","title":"Power LED","text":"<p>The lone LED on this board labeled PWR indicates when the 3.3V circuit is powered.</p> <p></p>"},{"location":"hardware_overview/#solder-jumpers","title":"Solder Jumpers","text":"<p>The breakout has four solder jumpers labeled PWR, PSEL, PWM, and I<sup>2</sup>C.</p> <p></p> <ul> <li>PWR: The PWR jumper completes the Power LED circuit. Open it to turn off the power LED to reduce the current draw of the board. </li> <li>PSEL: The PSEL jumper is a three-way jumper that sets whether the PAS CO2 outputs over I<sup>2</sup>C (Default) or UART (Alternate). By default, the jumper pulls the PSEL line to Ground and enables the I<sup>2</sup>C interface indicated by the small \"I\" on the jumper. Severing the trace between the \"I\" pad and center pad and then connecting the center pad to the \"U\" pad switches the PAS CO2 to communicate over UART.</li> <li>PWM: The PWM jumper controls the PWM output through the PWM disable input pin. This jumper is OPEN by default to disable PWM through the internal pullup resistor. Close it to tie the PWM disable pin to ground and enable PWM output.</li> </ul>"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>This breakout measures in a bit larger than the Qwiic 1\"x1\" standard to accomidate the boost circuit for the IR emitter. The board measures 1\"x1.6\"(25.4mm x 40.64mm) with four mounting holes that fit a 4-40 screw.</p> <p></p>"},{"location":"introduction/","title":"Introduction","text":"<p>The SparkFun Photoacoustic Spectroscopy CO<sub>2</sub> Sensor - PASCO2V01 (Qwiic) is a breakout using the XENSIV<sup>\u2122</sup> PAS CO2 sensor package from Infineon<sup>\u00a9</sup> which measures highly-accurate CO<sub>2</sub> concentrations and outputs data in direct parts-per-million (ppm) format over I<sup>2</sup>C, UART and PWN. The PAS CO2 employs a photoacoustic spectroscopy measurement system that combines narrow-band filtered IR light and a highly sensitive microphone inside the sensing cavity. The PAS CO2 measures CO<sub>2</sub> concentrations from 0 to 32,000ppm with a best accuracy of \u00b1(30ppm +3%) when reading between 400 and 5,000ppm. It also includes and integrated microcontroller that processes and converts the data into direct ppm readout over any of the three communication interfaces.</p> <p>This board includes a boost circuit to increase a 3.3V supply from the Qwiic connectors (or external) to 12V for the IR emitter supply voltage. This circuit includes a series of decoupling capacitors to output a clean 12V. We've also broken out all of the pins from the PAS CO2 package to 0.1\"-spaced PTH headers so users have full access to all of the sensor's features.</p> <p>In this guide we'll go over the hardware on this Qwiic breakout, how to assemble it into a circuit, and how to install and use Infineon's XENSIV PAS CO2 Arduino Library to configure and interact with the sensor.</p>"},{"location":"introduction/#required-materials","title":"Required Materials","text":"<p>To follow along with this guide you will need a microcontroller to communicate with this breakout. Below are a few options that come Qwiic-enabled out of the box:</p> <ul> <li> <p> <p> </p> <p> SparkFun IoT RedBoard - ESP32 Development Board DEV-20168 </p> <li> <p> <p> </p> <p> SparkFun RedBoard Plus DEV-18158 </p> <li> <p> <p> </p> <p> SparkFun Thing Plus - Artemis DEV-18158 </p> <li> <p> <p> </p> <p> SparkFun Thing Plus - ESP32 WROOM (USB-C) DEV-20168 </p> <p>If your chosen microcontroller is not already Qwiic-enabled, you can add that functionality with one or more of the following items:</p> <ul> <li> <p> <p> </p> <p> SparkFun Qwiic Cable Kit KIT-15081 </p> <li> <p> <p> </p> <p> SparkFun Qwiic Adapter DEV-14495 </p> <li> <p> <p> </p> <p> SparkFun Qwiic Shield for Arduino DEV-14352 </p> <li> <p> <p> </p> <p> SparkFun Qwiic Shield for Thing Plus DEV-16790 </p> <p>You will also need at least one Qwiic cable to connect your breakout to your microcontroller:</p> <ul> <li> <p> <p> </p> <p> Flexible Qwiic Cable - 100mm PRT-17259 </p> <li> <p> <p> </p> <p> Flexible Qwiic Cable - 50mm PRT-17260 </p> <li> <p> <p> </p> <p> Flexible Qwiic Cable - 500mm PRT-17257 </p> <li> <p> <p> </p> <p>Flexible Qwiic Cable - Female Jumper (4-pin) CAB-17261 </p>"},{"location":"introduction/#optional-materials","title":"Optional Materials","text":"<p>If you prefer a soldered connection for I<sup>2</sup>C, prefer to use either the UART or PWM interfaces, or want to follow along with the Early Measurments Example later in this guide, you may need some of the products listed below:</p> <ul> <li> <p> <p> </p> <p> Break Away Headers - Straight PRT-00116 </p> <li> <p> <p> </p> <p> SparkFun Beginner Tool Kit TOL-14681 </p> <li> <p> <p> </p> <p> Hobby Knife TOL-09200 </p> <li> <p> <p> </p> <p>Chip Quik No-Clean Flux Pen - 10mL CAB-14579 </p>"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>We designed this board for integration into SparkFun's Qwiic connect system.  Click on the banner below to learn more about the SparkFun Qwiic Connect System.</p> Qwiic Connect System <p>Before getting started with this Hookup Guide, you may want to read through the tutorials below if you are not familiar with the concepts covered in them or want a refresher. If you are using either of the Qwiic Shields linked above, we recommend reading through their respective Hookup Guides before continuing with this tutorial:</p> <ul> <li> <p> Serial Communication </p> </li> <li> <p> I2C </p> </li> <li> <p> Logic Levels </p> </li> <li> <p> Installing Arduino IDE </p> </li> <li> <p> Installing an Arduino Library </p> </li> <li> <p> Serial Terminal Basics </p> </li> <li> <p> How to Work with Jumper Pads and PCB Traces </p> </li> <li> <p> Qwiic Shield for Arduino &amp; Photon Hookup Guide </p> </li> <li> <p> Qwiic Shield for Thing Plus Hookup Guide </p> </li> </ul>"},{"location":"resources/","title":"Resources","text":"<p>For more information about the XENSIV PAS CO2 sensor and this breakout, take a look at the resources below:</p> <ul> <li>Schematic</li> <li>Eagle Files</li> <li>Board Dimensions</li> <li>Datasheet (PASCO2V01)</li> <li>Datasheet (AP3012 Boost Regulator)</li> <li>Design-In Guidelines</li> <li>Low Power App Note</li> <li>PAS CO2 FCS &amp; ABOC Compensation App Note</li> <li>GitHub Repository</li> <li>XENSIV Arduino Library Repository</li> </ul>"},{"location":"single_page/","title":"Introduction","text":"<p>The SparkFun Photoacoustic Spectroscopy CO<sub>2</sub> Sensor - PASCO2V01 (Qwiic) is a breakout using the XENSIV<sup>\u2122</sup> PAS CO2 sensor package from Infineon<sup>\u00a9</sup> which measures highly-accurate CO<sub>2</sub> concentrations and outputs data in direct parts-per-million (ppm) format over I<sup>2</sup>C, UART and PWN. The PAS CO2 employs a photoacoustic spectroscopy measurement system that combines narrow-band filtered IR light and a highly sensitive microphone inside the sensing cavity. The PAS CO2 measures CO<sub>2</sub> concentrations from 0 to 32,000ppm with a best accuracy of \u00b1(30ppm +3%) when reading between 400 and 5,000ppm. It also includes and integrated microcontroller that processes and converts the data into direct ppm readout over any of the three communication interfaces.</p> <p>This board includes a boost circuit to increase a 3.3V supply from the Qwiic connectors (or external) to 12V for the IR emitter supply voltage. This circuit includes a series of decoupling capacitors to output a clean 12V. We've also broken out all of the pins from the PAS CO2 package to 0.1\"-spaced PTH headers so users have full access to all of the sensor's features.</p> <p>In this guide we'll go over the hardware on this Qwiic breakout, how to assemble it into a circuit, and how to install and use Infineon's XENSIV PAS CO2 Arduino Library to configure and interact with the sensor.</p>"},{"location":"single_page/#required-materials","title":"Required Materials","text":"<p>To follow along with this guide you will need a microcontroller to communicate with this breakout. Below are a few options that come Qwiic-enabled out of the box:</p> <ul> <li> <p> <p> </p> <p> SparkFun IoT RedBoard - ESP32 Development Board DEV-20168 </p> <li> <p> <p> </p> <p> SparkFun RedBoard Plus DEV-18158 </p> <li> <p> <p> </p> <p> SparkFun Thing Plus - Artemis DEV-18158 </p> <li> <p> <p> </p> <p> SparkFun Thing Plus - ESP32 WROOM (USB-C) DEV-20168 </p> <p>If your chosen microcontroller is not already Qwiic-enabled, you can add that functionality with one or more of the following items:</p> <ul> <li> <p> <p> </p> <p> SparkFun Qwiic Cable Kit KIT-15081 </p> <li> <p> <p> </p> <p> SparkFun Qwiic Adapter DEV-14495 </p> <li> <p> <p> </p> <p> SparkFun Qwiic Shield for Arduino DEV-14352 </p> <li> <p> <p> </p> <p> SparkFun Qwiic Shield for Thing Plus DEV-16790 </p> <p>You will also need at least one Qwiic cable to connect your breakout to your microcontroller:</p> <ul> <li> <p> <p> </p> <p> Flexible Qwiic Cable - 100mm PRT-17259 </p> <li> <p> <p> </p> <p> Flexible Qwiic Cable - 50mm PRT-17260 </p> <li> <p> <p> </p> <p> Flexible Qwiic Cable - 500mm PRT-17257 </p> <li> <p> <p> </p> <p>Flexible Qwiic Cable - Female Jumper (4-pin) CAB-17261 </p>"},{"location":"single_page/#optional-materials","title":"Optional Materials","text":"<p>If you prefer a soldered connection for I<sup>2</sup>C, prefer to use either the UART or PWM interfaces, or want to follow along with the Early Measurments Example later in this guide, you may need some of the products listed below:</p> <ul> <li> <p> <p> </p> <p> Break Away Headers - Straight PRT-00116 </p> <li> <p> <p> </p> <p> SparkFun Beginner Tool Kit TOL-14681 </p> <li> <p> <p> </p> <p> Hobby Knife TOL-09200 </p> <li> <p> <p> </p> <p>Chip Quik No-Clean Flux Pen - 10mL CAB-14579 </p>"},{"location":"single_page/#suggested-reading","title":"Suggested Reading","text":"<p>We designed this board for integration into SparkFun's Qwiic connect system.  Click on the banner below to learn more about the SparkFun Qwiic Connect System.</p> Qwiic Connect System <p>Before getting started with this Hookup Guide, you may want to read through the tutorials below if you are not familiar with the concepts covered in them or want a refresher. If you are using either of the Qwiic Shields linked above, we recommend reading through their respective Hookup Guides before continuing with this tutorial:</p> <ul> <li> <p> Serial Communication </p> </li> <li> <p> I2C </p> </li> <li> <p> Logic Levels </p> </li> <li> <p> Installing Arduino IDE </p> </li> <li> <p> Installing an Arduino Library </p> </li> <li> <p> Serial Terminal Basics </p> </li> <li> <p> How to Work with Jumper Pads and PCB Traces </p> </li> <li> <p> Qwiic Shield for Arduino &amp; Photon Hookup Guide </p> </li> <li> <p> Qwiic Shield for Thing Plus Hookup Guide </p> </li> </ul>"},{"location":"single_page/#hardware-overview","title":"Hardware Overview","text":"<p>Let's take a closer look at the XENSIV\u2122 PAS CO<sub>2</sub> sensor and other hardware present on this Qwiic breakout.</p>"},{"location":"single_page/#xensiv-pas-co2-sensor","title":"XENSIV PAS CO2 Sensor","text":"<p>The XENSIV PAS CO2 sensor from Infineon utilizes a photoacoustic spectroscopy gas measurement system to accurately measure CO<sub>2</sub> concentration in a very stable sensing environment. </p> <p></p> <p>Photoacoustic spectroscopy uses a combination of narrow-band filtered IR light and MEMS microphone to measure CO<sub>2</sub> molecule concentration with high accuracy. The PAS CO<sub>2</sub> package includes an on-board microcontroller that parses the data recorded and converts it into direct parts per million (ppm) output to either UART, I<sup>2</sup>C, or pulse width modulation (PWM). For a complete overview of the PAS CO2, refer to the datasheet.</p> <p>You may be wondering what photoacoustic spectroscopy means. Photoacoustic measuring uses light (photo) and sound/vibrations (acoustic) in tandem to measure the the photoacoustic effect when energy is absorbed by particles. The sensor shines a specific frequency of IR light that CO<sub>2</sub> molecules absorb causing them to heat up, expand and release a pressure wave (sound) wave that the MEMS microphone picks up. This data is then processed and output in human-readable concentrations in PPM. This is just a quick and basic explanation of photoacoustic spectroscopy used in the PAS CO2 sensor. For detailed information, refer to Invensense's product brief for the sensor.</p> <p>The PAS CO2 has three operating modes: Idle, Continuous, and Single-Shot. In idle mode the sensor is inactive and does not take any measurements. In continuous mode the sensor takes periodic measurements and returns to idle once the measurement sequence finishes. The measurement period is configurable from anywhere between 5 to 4095 seconds. In single-shot mode the sensor enters a single measurement period and then returns to idle mode. </p> Parameter Units Min Typ Max Notes CO<sub>2</sub> Output Range ppm 0 - 32,000 CO<sub>2</sub> Measurement Accuracy ppm - \u00b1(30 + 3%) - Accuracy when measuring between 400ppm and 5,000ppm. Ambient Temperature Range \u00b0C 0 - 50 Relative Humidity Range %RH 0 - 85 CO<sub>2</sub> Sampling Time s 5 60 4095"},{"location":"single_page/#power-boost-circuit","title":"Power &amp; Boost Circuit","text":"<p>The PAS CO2 uses two input voltages, 12V for the IR emitter and 3.3V for the microcontroller and other components. This breakout has a AP3012 boost regulator to step up 3.3V from the Qwiic connectors to 12V along with a series of decoupling capacitors to ensure the IR emitter gets a clean supply voltage. The breakout also has PTH pins for both supply voltage if users prefer to power the sensor from a dedicated power supply. If you select this option, ensure both voltages fall within the supply range for each input (VDD3.3: 3V-3.6V and VDD12: 10.8V-13.2V).</p>"},{"location":"single_page/#communication-interfaces-pinout","title":"Communication Interfaces &amp; Pinout","text":"<p>We designed this board to set the PAS CO2 to communicate by I<sup>2</sup>C by default but have included PTH pins for both the UART and PWM interfaces along with solder jumpers to enable/disable all three options.</p> <p></p>"},{"location":"single_page/#qwiici2c","title":"Qwiic/I<sup>2</sup>C","text":"<p>The board routes the PAS CO2's I<sup>2</sup>C interface to a pair of Qwiic connectors as well as 0.1\"-spaced plated through-hole (PTH) headers. This header also includes the PAS CO2's Interrupt pin, the AP3012 boost regulator's Enable pin, as well as connections to 3.3V and GND. The PAS CO2's unshifted 7-bit I<sup>2</sup>C address is 0x28.</p> <p>The Interrupt pin can function as a standard hardware interrupt for alarm thresholds, data ready, and sensor busy statuses but also is configurable to act as an early measurement start notification. In this mode, the interrupt pin enters an active state (set to either active-high or active-low) roughly one second before a measurement period which can be tied to the enable pin for the LM62421 boost regulator. The interrupt turns this power supply on for roughly 0.2s at the start of the measurement period and again at the end. The design of the board has both this pin and the boost regulator's enable pin next to each other so users can tie them to each other to turn on the boost regulator just before measurement occurs to help conserve power.</p>"},{"location":"single_page/#uart","title":"UART","text":"<p>The board routes the TX and RX pins to one side of the board along with a Ground PTH for voltage reference if needed. This interface is disabled by default and requires adjusting the PSEL jumper on the back of the board. Read on to the Solder Jumpers section for more information about enabling UART. </p>"},{"location":"single_page/#pwm","title":"PWM","text":"<p>The PAS CO2's PWM interface is routed to the oppposite side of the board from the UART and also includes a Ground PTH for voltage reference. This interface is also disabled by default and can be enabled by adjusting the PWM jumper on the back of the board. Read on to the Solder Jumpers section for more information on enabling PWM output.</p>"},{"location":"single_page/#power-led","title":"Power LED","text":"<p>The lone LED on this board labeled PWR indicates when the 3.3V circuit is powered.</p> <p></p>"},{"location":"single_page/#solder-jumpers","title":"Solder Jumpers","text":"<p>The breakout has four solder jumpers labeled PWR, PSEL, PWM, and I<sup>2</sup>C.</p> <p></p> <ul> <li>PWR: The PWR jumper completes the Power LED circuit. Open it to turn off the power LED to reduce the current draw of the board. </li> <li>PSEL: The PSEL jumper is a three-way jumper that sets whether the PAS CO2 outputs over I<sup>2</sup>C (Default) or UART (Alternate). By default, the jumper pulls the PSEL line to Ground and enables the I<sup>2</sup>C interface indicated by the small \"I\" on the jumper. Severing the trace between the \"I\" pad and center pad and then connecting the center pad to the \"U\" pad switches the PAS CO2 to communicate over UART.</li> <li>PWM: The PWM jumper controls the PWM output through the PWM disable input pin. This jumper is OPEN by default to disable PWM through the internal pullup resistor. Close it to tie the PWM disable pin to ground and enable PWM output.</li> </ul>"},{"location":"single_page/#board-dimensions","title":"Board Dimensions","text":"<p>This breakout measures in a bit larger than the Qwiic 1\"x1\" standard to accomidate the boost circuit for the IR emitter. The board measures 1\"x1.6\"(25.4mm x 40.64mm) with four mounting holes that fit a 4-40 screw.</p> <p></p>"},{"location":"single_page/#hardware-assembly","title":"Hardware Assembly","text":"<p>Now that we're familiar with the PAS CO2 sensor and other hardware on this breakout, it's time to assemble it into a circuit.</p>"},{"location":"single_page/#qwiic-assembly","title":"Qwiic Assembly","text":"<p>SparkFun's Qwiic system makes assembling a circuit a breeze. Simply plug the breakout into your chosen microcontroller with a Qwiic cable. After assembling your circuit, it should look similar to the photo below:</p> <p></p>"},{"location":"single_page/#soldered-assembly","title":"Soldered Assembly","text":"<p>Those who prefer to use either the UART or PWM interfaces or the other pins broken out on this board should solder wires or header pins to the PTH pins on the side of the board. If you're not familiar with through-hole soldering or would like a refresher, take a look at our Through-Hole Soldering Tutorial:</p> <ul> <li> How to Solder: Through-Hole Soldering </li> </ul>"},{"location":"single_page/#boost-regulator-interrupt-assembly","title":"Boost Regulator Interrupt Assembly","text":"<p>The Early Measurement example in the Examples section demonstrates how to use the PAS CO2's Interrupt pin as an early measurement signal to control the boost regulator's power during measurement periods. If you want to follow along with that example you'll need to tie the INT PTH pin and EN PTH pin together. We recommend a set of headers to these PTHs and bridge the EN and INT pins together using a jumper like this. You can also create a temporary connection between these pins with some alligator clips or through some wiring on a breadboard.</p> <p>Next, connect the INT pin on the PAS CO<sub>2</sub> sensor breakout to an interrupt capable pin on your development board. The example assumes the use of an ESP32 development board and sets pin 13 so adjust the wiring and code if necessary. With everything wired up on a breadboard, the circuit should look something similar to the photo below:</p> <p></p>"},{"location":"single_page/#calibration-procedure","title":"Calibration Procedure","text":"<p>The PASCO2V01 sensors require a week long calibration period, measuring every 10 seconds. During that period, the sensor must be outside for at least 30 minutes while taking measurements. Refer to the Automatic baseline offset correction (ABOC) and forced compensation scheme (FCS) application note for complete information about the calibration process. The graph below shows three sensors data outputs merge together during our calibration testing:</p> <p></p>"},{"location":"single_page/#installation-recommendations","title":"Installation Recommendations","text":"<p>For ideal measurements, Infineon has several recommendations for installing the sensor in the final application found in this application note. The list below outlines most of them but for complete information, refer to the app note linked above.</p> <ul> <li>Allow space above the sensor at least 12mm tall with a minimum opening size of 14mm x 14mm.</li> <li>Avoid direct airflow in front of the sensor.</li> <li>Isolate the sensor from ambient heat sources.</li> <li>Isolate the sensor from vibration sources.</li> <li>Avoid placing the sensor in direct sunlight.</li> <li>Prevent any condensation/water contact with the sensor.</li> </ul>"},{"location":"single_page/#software-setup-and-programming","title":"Software Setup and Programming","text":"<p>Attention</p> <p>If this is your first time using Arduino, please read through our tutorial on installing the Arduino IDE. If you have not installed an Arduino library before, we recommend you check out our installation guide.</p> <p>Infineon has written an Arduino Library for the PAS CO2 sensor to make it easy to get CO<sub>2</sub> data from the sensor along with other settings and features. Users can download the library through the Arduino Library Manager by searching for \"XENSIVE PAS CO2x\" as the screenshot below shows:</p> <p>Those who prefer to manually install it can download a ZIP of the library from the GitHub repository or by clicking the button below:</p> <p> XENSIV PAS CO2 Arduino Library (ZIP) </p> <p>With the library installed let's move on to looking at a few of the examples included in it.</p>"},{"location":"single_page/#example-code","title":"Example Code","text":""},{"location":"single_page/#icon-simplearduino","title":"icon: simple/arduino","text":""},{"location":"single_page/#example-1-continuous-mode","title":"Example 1 - Continuous Mode","text":"<p>The first example demonstrates how to initialize the sensor over I<sup>2</sup>C to measure CO<sub>2</sub> data in Continuous Mode and print it out over serial. Open the example by navigating to File &gt; Examples &gt; XENSIV PAS CO2 &gt;  continuous-mode. After opening the example, select your Board and Port (in our case, SparkFun RedBoard IoT), and click \"Upload\". Open the serial terminal with the baud set to 9600 and you should see the same as the screenshot below: <p></p>"},{"location":"single_page/#example-2-boost-regulator-early-notification","title":"Example 2 - Boost Regulator Early Notification","text":"<p>The second example follows the assembly step in the Hardware Assembly section tying the PAS CO2's INT pin to the boost regulator's EN pin to control power for the regulator during measurements. This is a custom example we wrote so you'll need to get it from the GitHub Repository or by copying the code below into a blank sketch:</p> Early Measurement Example <pre><code> /*\n  *  Name: Example01_EarlyMeasurementStartInterrupt\n  *\n  *  By: SparkFun Electronics, based on code from Infineon\n  * \n  *  SPDX-License-Identifier: MIT\n  *\n  *\n  *  Description: \n  *  This example is based on the early notification example from Infineon's \n  *  `arduino-pas-co2-sensor` library. The biggest deviation is to make it \n  *  specific to the ESP32 Thing Plus C. This example interfaces the interrupt\n  *  pin of the ESP32 Thing Plus C for readout synch and ties the INT pin to the\n  *  EN pin on the Qwiic PASCO2V01 board.\n  *\n  *  Please see examples/XENSIV PAS CO2/early-notification for more details.\n  * \n  *  Feel like supporting open source hardware?\n  *  Buy a board from SparkFun!\n  *  SparkFun Photoacoustic Spectroscopy CO2 Sensor - PASCO2V01 (Qwiic) (SEN-22956) https://www.sparkfun.com/products/22956\n  *  SparkFun IoT RedBoard - ESP32 Development Board (WRL-19177) https://www.sparkfun.com/products/19177\n  *\n  *  Hardware connections:\n  *  Connect the qwiic connector between the ESP32 Thing Plus C and the Qwiic PASCO2V01.\n  *  Need a qwiic cable? Get one here: https://www.sparkfun.com/products/17260\n  *  Using a breadboard, connect a jumper between the INT and EN pins, then \n  *    connect it to pin 12 on the ESP32 Thing Plus C.\n  *\n  */\n\n #include &lt;Arduino.h&gt;\n #include &lt;pas-co2-ino.hpp&gt; // http://librarymanager/All#XENSIV_PAS_CO2\n\n uint8_t intPin = 13; // ESP32 Thing Plus C pin, change for your hardware.\n\n #define I2C_FREQ_HZ 400000\n #define PERIODIC_MEAS_INTERVAL_IN_SECONDS 10\n #define EARLY_NOTIFICATION_ENABLED true\n\n PASCO2Ino myCO2Sensor(&amp;Wire, intPin);\n\n int16_t co2ppm;\n Error_t err;\n\n /* \n  * ISR will be called when the sensor is about start performing a measurement \n  * and when it's completed. This will allow the main loop to read the \n  * measurement when one is ready.\n  */\n volatile bool measurementReady = false;\n void isr (void *) {\n   if (digitalRead(intPin) == LOW)\n     measurementReady = true;\n   else\n     measurementReady = false;\n }\n\n void setup() {\n   Serial.begin(115200);\n\n   // Wait for serial to open.\n   while(!Serial) {\n     delay(100);\n   }\n\n   // Start I2C.\n   Wire.begin();\n   Wire.setClock(I2C_FREQ_HZ);\n\n   // Initialize the sensor.\n   err = myCO2Sensor.begin();\n   if(XENSIV_PASCO2_OK != err) {\n     Serial.print(\"Initialization error: \");\n     Serial.println(err);\n   }\n\n   // Start measurement every 10s, no alarm set, pass in the ISR, and enable early notification.\n   err = myCO2Sensor.startMeasure(PERIODIC_MEAS_INTERVAL_IN_SECONDS, 0, isr, EARLY_NOTIFICATION_ENABLED);\n   if(XENSIV_PASCO2_OK != err){\n     Serial.print(\"Start measurement error: \");\n     Serial.println(err);\n   }\n\n   Serial.println(\"Sensor setup complete and measurement started successfully.\");\n\n }\n\n void loop() {\n   if (measurementReady) {\n\n     // Clear flag\n     measurementReady = false;\n\n     Serial.println(\"Measurement ready.\");\n\n     err = myCO2Sensor.getCO2(co2ppm);\n     if(XENSIV_PASCO2_OK != err){\n       Serial.print(\"CO2 measure error: \");\n       Serial.println(err);\n     }\n\n     Serial.print(\"CO2 PPM value: \");\n     Serial.println(co2ppm);\n   }\n\n }\n</code></pre> <p>Select your board and port and upload the example. After the uploade completes, open the serial terminal with the baud set to 115200 and you should see a printout similar to the one below with CO<sub>2</sub> measurements printing every ten seconds:</p> <p></p>"},{"location":"single_page/#troubleshooting-tips","title":"Troubleshooting Tips","text":""},{"location":"single_page/#ideal-installation-recommendations","title":"Ideal Installation Recommendations","text":"<p>For ideal measurements, Infineon has several recommendations for installing the sensor in the final application found in this application note. The list below outlines most of them but for complete information, refer to the app note linked above.</p> <ul> <li>Allow a space above the sensor at least 12mm tall with a minimum opening size of 14mm x 14mm.</li> <li>Avoid direct airflow in front of the sensor.</li> <li>Isolate the sensor from ambient heat sources.</li> <li>Isolate the sensor from vibration sources.</li> <li>Avoid placing the sensor in direct sunlight.</li> <li>Prevent any condensation/water contact with the sensor.</li> </ul>"},{"location":"single_page/#calibration-procedure_1","title":"Calibration Procedure","text":"<p>The PASCO2V01 sensors require a week long calibration period, measuring every 10 seconds. During that period, the sensor must be outside for at least 30 minutes while taking measurements. Refer to the Automatic baseline offset correction (ABOC) and forced compensation scheme (FCS) application note for complete information about the calibration process. The graph below shows three sensors data outputs merge together during our calibration testing:</p> <p></p>"},{"location":"single_page/#general-troubleshooting","title":"General Troubleshooting","text":"<p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search product forums and ask questions.</p> <p>Account Registration Required</p> <p>If this is your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"single_page/#resources","title":"Resources:","text":""},{"location":"software_setup/","title":"Software Setup","text":"<p>Attention</p> <p>If this is your first time using Arduino, please read through our tutorial on installing the Arduino IDE. If you have not installed an Arduino library before, we recommend you check out our installation guide.</p> <p>Infineon has written an Arduino Library for the PAS CO2 sensor to make it easy to get CO<sub>2</sub> data from the sensor along with other settings and features. Users can download the library through the Arduino Library Manager by searching for \"XENSIVE PAS CO2x\" as the screenshot below shows:</p> <p>Those who prefer to manually install it can download a ZIP of the library from the GitHub repository or by clicking the button below:</p> <p> XENSIV PAS CO2 Arduino Library (ZIP) </p> <p>With the library installed let's move on to looking at a few of the examples included in it.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#ideal-installation-recommendations","title":"Ideal Installation Recommendations","text":"<p>For ideal measurements, Infineon has several recommendations for installing the sensor in the final application found in this application note. The list below outlines most of them but for complete information, refer to the app note linked above.</p> <ul> <li>Allow a space above the sensor at least 12mm tall with a minimum opening size of 14mm x 14mm.</li> <li>Avoid direct airflow in front of the sensor.</li> <li>Isolate the sensor from ambient heat sources.</li> <li>Isolate the sensor from vibration sources.</li> <li>Avoid placing the sensor in direct sunlight.</li> <li>Prevent any condensation/water contact with the sensor.</li> </ul>"},{"location":"troubleshooting/#calibration-procedure","title":"Calibration Procedure","text":"<p>The PASCO2V01 sensors require a week long calibration period, measuring every 10 seconds. During that period, the sensor must be outside for at least 30 minutes while taking measurements. Refer to the Automatic baseline offset correction (ABOC) and forced compensation scheme (FCS) application note for complete information about the calibration process. The graph below shows three sensors data outputs merge together during our calibration testing:</p> <p></p>"},{"location":"troubleshooting/#general-troubleshooting","title":"General Troubleshooting","text":"<p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search product forums and ask questions.</p> <p>Account Registration Required</p> <p>If this is your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"github/contribute/","title":"Help Improve the Experience!","text":"<p>Spot an improvement opportunity? Feel free to contribute to our open-source design and documentation. </p>"},{"location":"github/contribute/#enhance-our-documentation","title":"Enhance our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun Photoacoustic Spectroscopy CO<sub>2</sub> Sensor - PASCO2V01 (Qwiic) repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>Fork this repo</li> <li>Add your corrections or improvements to the markdown file</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#upgrade-our-hardware-design","title":"Upgrade our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Photoacoustic Spectroscopy CO<sub>2</sub> Sensor - PASCO2V01 (Qwiic) repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-improvement","title":"Submit a Design Improvement","text":"<ol> <li>Fork this repo</li> <li>Add your design modifications</li> <li> <p>File a pull request with your changes, and enjoy making the world a better place.</p> <ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested upgrades, if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision.</li> </ul> <p>Note</p> <p>Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.</p> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provide some recognition to those who have contributed to this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Attention</p> <p>This is not where customers should seek assistance on a product. If you require technical assistance or have questions about a product that is not working as expected, please head over to the SparkFun Technical Assistance page for some initial troubleshooting.  SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search product forums and ask questions.</p> <p>Account Registration Required</p> <p>If this is your first visit to our forum, you'll need to create a Forum Account to search product forums and post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun Photoacoustic Spectroscopy CO<sub>2</sub> Sensor - PASCO2V01 (Qwiic) repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repo</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Photoacoustic Spectroscopy CO<sub>2</sub> Sensor - PASCO2V01 (Qwiic) repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense?","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board?","text":"<ul> <li>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements. (For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.)</li> <li>If part of the board's functionality is missing, please open an issue and file a feature request.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, Fork this repo</li> <li>Add your design improvement(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s), if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"}]}